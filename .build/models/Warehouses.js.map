{
  "version": 3,
  "sources": ["../../models/Warehouses.ts"],
  "sourcesContent": ["import Products from \"./Products\";\n\nexport default class Warehouse {\n  _name;\n  _location;\n  #products: any[];\n  #necessaryvaluesInProducts: number = 6;\n  #productNotFound: number = -1;\n\n  constructor(name: string, location: string) {\n    this._name = name;\n    this._location = location;\n    this.#products = [];\n\n  }\n\n  addProduct(productToAdd: Products): void {\n    if (this.productValidation(productToAdd)) {\n      this.#products.push(productToAdd);\n      console.log(`The product was added succesfully`)\n    } else {\n      console.error(\"INVALID: The product must have all the values\");\n    }\n  }\n\n  showProducts(): void {\n    this.#products.forEach(p => console.log(p.getProduct()));\n  }\n\n  productValidation(productToAdd: Products): boolean {\n    let valueAddedToProduct = Object.values(productToAdd.getProduct());\n    if (valueAddedToProduct.length < this.#necessaryvaluesInProducts) {\n      return false;\n    }\n    return true;\n  }\n\n  updateProductName(idProduct: number, newName: string): void {\n    let IndexproductToBeUpdated: number = this.getIndexProductToBeUpdated(idProduct)\n\n    if (IndexproductToBeUpdated !== this.#productNotFound) {\n      this.#products[IndexproductToBeUpdated].setName(newName);\n      console.log(`The product name with ID: ${idProduct}  was successfully updated`)\n    } else {\n      console.log(`The product with ID: ${idProduct} was not found`)\n    }\n  }\n\n  updateProductQuantity(idProduct: number, newQuantity: number): void {\n    let IndexproductToBeUpdated: number = this.getIndexProductToBeUpdated(idProduct)\n\n    if (IndexproductToBeUpdated !== this.#productNotFound) {\n      this.#products[IndexproductToBeUpdated].setQuantity(newQuantity);\n      console.log(`The product quantity with ID: ${idProduct}  was successfully updated`)\n    } else {\n      console.log(`The product with ID: ${idProduct} was not found`)\n    }\n  }\n\n  updateProductPrice(idProduct: number, newPrice: number): void {\n    let IndexproductToBeUpdated: number = this.getIndexProductToBeUpdated(idProduct)\n\n    if (IndexproductToBeUpdated !== this.#productNotFound) {\n      this.#products[IndexproductToBeUpdated].setPrice(newPrice);\n      console.log(`The product price with ID: ${idProduct}  was successfully updated`)\n    } else {\n      console.log(`The product with ID: ${idProduct} was not found`)\n    }\n\n  }\n\n  addProductColor(idProduct: number, newColor: string): void {\n    let productToBeUpdated = this.getProductToBeUpdated(idProduct)\n    productToBeUpdated.colors.push(newColor);\n    console.log(`The new color of product with id: ${idProduct}, has been added succesfully`)\n  }\n\n  removeProductColor(idProduct: number, colorToRemove: string): void {\n    let productToBeUpdated = this.getProductToBeUpdated(idProduct)\n    productToBeUpdated.colors = productToBeUpdated.colors.filter(p => p !== colorToRemove);\n  }\n\n  addProductSize(idProduct: number, newSize: string): void {\n    let productToBeUpdated = this.getProductToBeUpdated(idProduct)\n    productToBeUpdated.size.push(newSize);\n    console.log(`The new size of product with id: ${idProduct}, has been added succesfully`)\n  }\n\n  removeProductSize(idProduct: number, sizeToRemove: string): void {\n    let productToBeUpdated = this.getProductToBeUpdated(idProduct)\n    productToBeUpdated.size = productToBeUpdated.size.filter(p => p !== sizeToRemove);\n  }\n\n  getProductToBeUpdated(idProduct: number): number {\n    const productToBeUpdated = this.#products.find(p => p.getProduct().idProduct === idProduct);\n    return productToBeUpdated.getProduct();\n  }\n\n  getIndexProductToBeUpdated(idProduct: number): number {\n    let indexProductOnWarehouse: number =\n      this.#products.findIndex(p =>\n        p.getProduct().idProduct === idProduct);\n\n    return indexProductOnWarehouse;\n  }\n\n\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAEA,gBAA+B;AAAA,EAC7B;AAAA,EACA;AAAA;AAAA,+BAEqC;AAAA,qBACV;AAAA,EAE3B,YAAY,MAAc,UAAkB;AAC1C,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,qBAAiB;AAAA;AAAA,EAInB,WAAW,cAA8B;AACvC,QAAI,KAAK,kBAAkB,eAAe;AACxC,qBAAe,KAAK;AACpB,cAAQ,IAAI;AAAA,WACP;AACL,cAAQ,MAAM;AAAA;AAAA;AAAA,EAIlB,eAAqB;AACnB,mBAAe,QAAQ,OAAK,QAAQ,IAAI,EAAE;AAAA;AAAA,EAG5C,kBAAkB,cAAiC;AACjD,QAAI,sBAAsB,OAAO,OAAO,aAAa;AACrD,QAAI,oBAAoB,SAAS,iCAAiC;AAChE,aAAO;AAAA;AAET,WAAO;AAAA;AAAA,EAGT,kBAAkB,WAAmB,SAAuB;AAC1D,QAAI,0BAAkC,KAAK,2BAA2B;AAEtE,QAAI,4BAA4B,uBAAuB;AACrD,qBAAe,yBAAyB,QAAQ;AAChD,cAAQ,IAAI,6BAA6B;AAAA,WACpC;AACL,cAAQ,IAAI,wBAAwB;AAAA;AAAA;AAAA,EAIxC,sBAAsB,WAAmB,aAA2B;AAClE,QAAI,0BAAkC,KAAK,2BAA2B;AAEtE,QAAI,4BAA4B,uBAAuB;AACrD,qBAAe,yBAAyB,YAAY;AACpD,cAAQ,IAAI,iCAAiC;AAAA,WACxC;AACL,cAAQ,IAAI,wBAAwB;AAAA;AAAA;AAAA,EAIxC,mBAAmB,WAAmB,UAAwB;AAC5D,QAAI,0BAAkC,KAAK,2BAA2B;AAEtE,QAAI,4BAA4B,uBAAuB;AACrD,qBAAe,yBAAyB,SAAS;AACjD,cAAQ,IAAI,8BAA8B;AAAA,WACrC;AACL,cAAQ,IAAI,wBAAwB;AAAA;AAAA;AAAA,EAKxC,gBAAgB,WAAmB,UAAwB;AACzD,QAAI,qBAAqB,KAAK,sBAAsB;AACpD,uBAAmB,OAAO,KAAK;AAC/B,YAAQ,IAAI,qCAAqC;AAAA;AAAA,EAGnD,mBAAmB,WAAmB,eAA6B;AACjE,QAAI,qBAAqB,KAAK,sBAAsB;AACpD,uBAAmB,SAAS,mBAAmB,OAAO,OAAO,OAAK,MAAM;AAAA;AAAA,EAG1E,eAAe,WAAmB,SAAuB;AACvD,QAAI,qBAAqB,KAAK,sBAAsB;AACpD,uBAAmB,KAAK,KAAK;AAC7B,YAAQ,IAAI,oCAAoC;AAAA;AAAA,EAGlD,kBAAkB,WAAmB,cAA4B;AAC/D,QAAI,qBAAqB,KAAK,sBAAsB;AACpD,uBAAmB,OAAO,mBAAmB,KAAK,OAAO,OAAK,MAAM;AAAA;AAAA,EAGtE,sBAAsB,WAA2B;AAC/C,UAAM,qBAAqB,eAAe,KAAK,OAAK,EAAE,aAAa,cAAc;AACjF,WAAO,mBAAmB;AAAA;AAAA,EAG5B,2BAA2B,WAA2B;AACpD,QAAI,0BACF,eAAe,UAAU,OACvB,EAAE,aAAa,cAAc;AAEjC,WAAO;AAAA;AAAA;",
  "names": []
}
